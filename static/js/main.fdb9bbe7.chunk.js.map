{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","foodName","calories","ingredients","image","className","map","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAqBeA,G,KAjBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,SAASC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,YAAYC,EAAW,EAAXA,MAC3C,OACI,sBAAKC,UAAU,cAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BJ,IAC5B,oBAAII,UAAU,SACd,kDAAqBH,EAArB,kBACA,oBAAIG,UAAU,SACd,6BACKF,EAAYG,KAAI,SAAAH,GAAW,OACxB,6BAAKA,EAAYI,YAGzB,qBAAKF,UAAU,QAAQG,IAAKJ,EAAOK,IAAI,UC2CpCC,EAvDH,WACV,IADgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,UAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,uEAAD,OAC6CL,EAD7C,mBAbf,WAae,oBAZd,qCAWG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAmBhB,OACE,sBAAKpB,UAAU,MAAf,UACE,uBAAMuB,SARQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBV,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa0B,KAAK,OAAOC,MAAOlB,EAAQmB,SAb1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAaf,wBAAQ3B,UAAU,gBAAgB0B,KAAK,SAAvC,uBAIF,qBAAK1B,UAAU,eAAf,SACCO,EAAQN,KAAI,SAAA6B,GAAM,OACjB,cAAC,EAAD,CAEAlC,SAAUkC,EAAOA,OAAOC,MACxBlC,SAAUiC,EAAOA,OAAOjC,SACxBE,MAAO+B,EAAOA,OAAO/B,MACrBD,YAAagC,EAAOA,OAAOhC,aAJtBgC,EAAOA,OAAOC,gBCnCZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fdb9bbe7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\n\r\n\r\nconst Recipe = ({foodName,calories,ingredients,image}) => {\r\n    return(\r\n        <div className=\"show-recipe\">\r\n            <h1 className=\"title-syle\">{foodName}</h1>\r\n            <hr className=\"line\"></hr>\r\n            <p>Calories (kcal): {calories} per serving</p>\r\n            <hr className=\"line\"></hr>\r\n            <ol>\r\n                {ingredients.map(ingredients => (\r\n                    <li>{ingredients.text}</li>\r\n                ))}\r\n            </ol>\r\n            <img className=\"image\" src={image} alt=\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = \"a4517b9a\";\n  const APP_KEY = \"e8d6460ce48524d6af86eacd9a4d4a44\";\n\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"fruits\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"wrap-recipes\">\n      {recipes.map(recipe =>(\n        <Recipe\n        key={recipe.recipe.label} \n        foodName={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}